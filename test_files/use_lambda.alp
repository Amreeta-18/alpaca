{- Tests for the compilation and use of a lambda defined and applied in the same
   expression.  For fix of issue #196.

   With thanks to https://github.com/lepoetemaudit for the initial test cases.
 -}
module use_lambda

export useLambda, useLambdaTuple, matchLambda, ffiLambda

val apply 'a 'b : fn (fn 'a -> 'b) 'a -> 'b
let apply f x = f x

-- Used to fail:
let useLambda x =
  apply (fn y -> x + y) 10

let useLambdaTuple x =
  apply (fn (_, y) -> x + y) (:ignored, 10)

let boundLambda x =
  let lambda = (fn y -> x + y) in
  apply lambda 10

let useLet x =
  apply (let f y = x + y in f) 10

-- Used to fail
val matchLambda : fn bool -> fn int -> int
let matchLambda v =
  match v with
    | true -> fn x -> x * x
    | false -> fn x -> (x + x) + 1

val boundMatchLambda : fn bool -> fn int -> int
let boundMatchLambda v =
  match v with
    | true -> (let f y = y * y in f)
    | false -> (let f y = y + y in f)

-- FFI and receive expressions are similar to match expressions
val ffiLambda 'a : fn 'a -> fn int -> int
let ffiLambda r =
  beam :io :format [r] with
    _ -> fn x -> x * x

let wait () =
  receive with
      x, is_integer x -> fn y -> y * 10

