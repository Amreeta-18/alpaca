* v0.2.8
Newest to oldest additions in each section.

** New
- destructure/pattern match in ~let~ bindings, [[https://github.com/j14159][j14159]]
- ~alpaca_printer~, type formatting and printing for compiler feedback, [[https://github.com/lepoetemaudit][lepoetemaudit]]
- build for OTP 20, [[https://github.com/getong][getong]]
- logical operators (and, or, xor), [[https://github.com/Licenser][Licenser]]
- explicit type signatures for top-level bindings, e.g. ~val add: fn int int -> int~, [[https://github.com/lepoetemaudit][lepoetemaudit]]
- nicely formatted and humane compiler output with colours, [[https://github.com/Licenser][Licenser]]
- local/inner functions can be curried, [[https://github.com/lepoetemaudit][lepoetemaudit]]
- able to specify default types and functions to be imported in a project, [[https://github.com/lepoetemaudit][lepoetemaudit]]
- infix functions starting with ~<~ are now right-associative, [[https://github.com/lepoetemaudit][lepoetemaudit]]
- generate a module's dependencies from source to support partial compilation, [[https://github.com/lepoetemaudit][lepoetemaudit]]
- support loading of pre-compiled ~BEAM~ files rather than requiring every module in source form, [[https://github.com/lepoetemaudit][lepoetemaudit]]
- quoted atoms, [[https://github.com/lepoetemaudit][lepoetemaudit]]
- German error message translation, [[https://github.com/ypaq][ypaq]]
- Spanish error message translation, [[https://github.com/arpunk][arpunk]] and [[https://github.com/yurrriq][yurrriq]]
- symbol, integer, and float AST nodes defined in Alpaca itself, [[https://github.com/j14159][j14159]]
- enable internationalization and formatting of error messages, [[https://github.com/danabr][danabr]]

** Fixes
- partial record matching works, no more cycles in reference cells, [[https://github.com/j14159][j14159]]
- type inferencer reference cells in ETS, no more processes, [[https://github.com/j14159][j14159]]
- unsized binaries work correctly when constructing binaries, [[https://github.com/lepoetemaudit][lepoetemaudit]]
- simple expressions don't require parens, e.g. ~[1 + 2, 3 + 4]~, [[https://github.com/lepoetemaudit][lepoetemaudit]]
- lambdas inside match expressions now work correctly, [[https://github.com/lepoetemaudit][lepoetemaudit]]
- don't re-type modules for every module-qualified function call, [[https://github.com/lepoetemaudit][lepoetemaudit]]
- correctly rewrite the internals of unbound lambdas, [[https://github.com/j14159][j14159]]
- don't perform exhaustiveness checks on already-compiled modules, [[https://github.com/lepoetemaudit][lepoetemaudit]]
- fix unification failure for nested ADTs, [[https://github.com/j14159][j14159]]
- ~fn~ as a reserved word in tests, [[https://github.com/Licenser][Licenser]]
- purge warnings removed for cleaner test output, [[https://github.com/Licenser][Licenser]]
- substantial test and warnings cleanup, [[https://github.com/Licenser][Licenser]]
- fixed variable lookup failure in exhaustiveness checks, [[https://github.com/j14159][j14159]]
- broken BIF fixes (~!=~, ~/~), [[https://github.com/lepoetemaudit][lepoetemaudit]]
- fix lambdas in records, [[https://github.com/j14159][j14159]]
- properly escape ~\~ sequences in strings, [[https://github.com/lepoetemaudit][lepoetemaudit]]
- usage example correction, [[https://github.com/monkeygroover][monkeygroover]]
- rewrite imported functions in tests, [[https://github.com/j14159][j14159]]
- rewrite lambdas in tests, [[https://github.com/j14159][j14159]]
- allow forward references to top-level bindings, [[https://github.com/j14159][j14159]]
- parameterized ~pid~ type fix when using ~is_pid~, [[https://github.com/j14159][j14159]]

* v0.2.7
** New
- parser and AST generation errors report in a uniform manner and are specified, https://github.com/danabr
- lambdas (anonymous functions), https://github.com/j14159
- function type specs have same syntax as lambdas, https://github.com/danabr
- generation ~test/0~ for EUnit, https://github.com/j14159

** Fixes
- correct arity for curried versions of functions, https://github.com/lepoetemaudit
- built-in types are no longer reserved words, https://github.com/danabr
- type arity errors unified, https://github.com/danabr
- bad variables in errors (throw, error, exit) are errors, https://github.com/j14159
- all parser and AST generation errors include line numbers, https://github.com/danabr
- line numbers for module definitions, https://github.com/danabr
- line numbers for unexported functions, https://github.com/danabr
- all clauses can lead with a ~|~, https://github.com/j14159

* v0.2.6
** New
- top-level ~let~ deprecates all significant whitespace, https://github.com/lepoetemaudit
- same function name allowed for different arity, https://github.com/j14159
- Alpaca's compiled modules prefixed with ~alpaca_~, https://github.com/lepoetemaudit
- zero-arity functions constrained to literals for use as values, https://github.com/lepoetemaudit
- property-based testing with PropEr, generates full modules for testing, https://github.com/ypaq
- import functions from other modules, https://github.com/j14159
- exhaustiveness checking for top-level functions, https://github.com/danabr
- functions as ADT members, https://github.com/danabr
- automatic currying of top-level functions, https://github.com/lepoetemaudit
- type aliases for arrow types, https://github.com/danabr
- record transformations, https://github.com/j14159

** Fixes
- apply arguments to an expression that evaluates to a function, https://github.com/j14159
- many whitespace fixes, https://github.com/lepoetemaudit and https://github.com/ypaq
- unused code and warnings cleanup, https://github.com/jkakar
- FFI calls must refer to missing variables, https://github.com/danabr
- unit value code generation, https://github.com/danabr
- reduced number of reserved words, https://github.com/danabr
- module-qualified constructors and types default to private, https://github.com/j14159
- more obvious typing of higher order types, https://github.com/danabr
- unified internal types for lists and maps, https://github.com/danabr
- referring to nonexistent types and type variables are errors, https://github.com/j14159
- unified error handling in AST generation, https://github.com/danabr

* v0.2.5
- early infix function support (operators, e.g. ~|>~) from https://github.com/lepoetemaudit
- multiple instances of ~_~ permitted in patterns
- ~throw/1~, ~exit1/~, and ~error/1~ are now available
- patterns in function arguments, e.g. ~g f Some x = Some (f x)~ or ~get_x {x=x} = x~
- types default to private in their defining module with explicit export and import in others
- minor type inferencer fixes for records and tuples
  
* v0.2.4
- fixes for type aliases and unions involving them:  https://github.com/danabr
- early record support with row polymorphism
- fixes for unification of the value type portion of maps
* v0.2.3
- comment syntax fixes:  https://github.com/danabr
- formatting and cleanup:  https://github.com/tuncer
- polymorphic ADT unification fix: https://github.com/danabr
- renamed ~call_erlang~ to ~beam~ for clarity:  https://github.com/tuncer
- built-in parametric types (e.g. list, map) can be parameterized by ADTs:  https://github.com/danabr
- fix for polymorphic process spawning:  https://github.com/j14159
* v0.2.2
- Haskell-style comments, from https://github.com/tuncer
- nested comments are errors, from https://github.com/yurrriq
- file renaming (cleanup) from https://github.com/tuncer (scanner -> mlfe_scanner)
- new compiler entry points from https://github.com/tuncer
* v0.2.1
- unary minus fix (parser corrections) from https://github.com/danabr.  Makes ~symbol-1~ work as ~symbol - 1~ does.
* v0.2.0
- dialyzer and xref fixes, Travis CI integration, courtesy of https://github.com/NobbZ
- module_info synthesized by the compiler, courtesy of https://github.com/erszcz
- typos and clarifications from https://github.com/tjweir, https://github.com/saem, https://github.com/ypaq, https://github.com/omarkj, https://github.com/yurrriq
- binaries, thanks to https://github.com/yurrriq and https://github.com/talentdeficit for feedback and ideas
- basic map support
- change to `spawn` syntax, it now takes a (syntactic) function application instead of function and arg list, thanks to https://github.com/ypaq for feedback
- a "language tour" document, thanks to https://github.com/ypaq and https://github.com/saem for initial feedback and corrections
- a simple unit test form/hook for creating basic EUnit-compatible tests
- UTF-8 strings, compiled as binaries
- character lists for Erlang string support
- lots of little type inferencer/checker fixes
